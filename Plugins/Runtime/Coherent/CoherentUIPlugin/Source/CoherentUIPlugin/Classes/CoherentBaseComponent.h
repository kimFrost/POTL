/*
This file is part of Coherent UI, modern user interface library for
games.

Copyright (c) 2012-2014 Coherent Labs AD and/or its licensors. All
rights reserved in all media.

The coded instructions, statements, computer programs, and/or related
material (collectively the "Data") in these files contain confidential
and unpublished information proprietary Coherent Labs and/or its
licensors, which is protected by United States of America federal
copyright law and by international treaties.

This software or source code is supplied under the terms of a license
agreement and nondisclosure agreement with Coherent Labs Limited and may
not be copied, disclosed, or exploited except in accordance with the
terms of that agreement. The Data may not be disclosed or distributed to
third parties, in whole or in part, without the prior written consent of
Coherent Labs Limited.

COHERENT LABS MAKES NO REPRESENTATION ABOUT THE SUITABILITY OF THIS
SOURCE CODE FOR ANY PURPOSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT
HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY, NONINFRINGEMENT, AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER, ITS AFFILIATES,
PARENT COMPANIES, LICENSORS, SUPPLIERS, OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
ANY WAY OUT OF THE USE OR PERFORMANCE OF THIS SOFTWARE OR SOURCE CODE,
EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
#pragma once

#include "CoherentUIViewListener.h"
#include "CoherentMediaRequestHandler.h"
#include "CoherentUIJSEvent.h"
#include "CoherentUIJSPayload.h"

#include "CoherentBaseComponent.generated.h"

USTRUCT()
struct FCoherentComponentTickFunction : public FTickFunction
{
	GENERATED_USTRUCT_BODY()

	class UCoherentBaseComponent* Target;

	virtual void ExecuteTick(float DeltaTime, enum ELevelTick TickType, ENamedThreads::Type CurrentThread, const FGraphEventRef& MyCompletionGraphEvent) override;
	virtual FString DiagnosticMessage();
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams(FUIReadyForBindingsSignature, int32, frameId, const FString&, Path, bool, isMainFrame);
DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams(FUIBindingsReleasedSignature, int32, frameId, const FString&, validatedPath, bool, isMainFrame);
DECLARE_DYNAMIC_MULTICAST_DELEGATE_FourParams(FUIFinishLoadSignature, int32, frameId, const FString&, validatedPath, bool, isMainFrame, int32, statusCode);
DECLARE_DYNAMIC_MULTICAST_DELEGATE_FourParams(FUIFailLoad, int32, frameId, const FString&, validatedPath, bool, isMainFrame, const FString&, error);
DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FUIOnNavigate, const FString&, url);
DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams(FUIScriptMessage, const FString&, message, const FString&, sourceId, int32, line);
DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FUICursorChanged, int32, cursorId);
DECLARE_DYNAMIC_MULTICAST_DELEGATE_FourParams(FUIJavaScriptMesssage, const FString&, message, const FString&, defaultPrompt, const FString&, frameURL, int32, type);
DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FUIOnError, const FString&, error);
DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FUIOnJavaScriptEvent, UCoherentUIJSPayload*, payload);
DECLARE_DYNAMIC_MULTICAST_DELEGATE(FUIScriptingReady);
DECLARE_DYNAMIC_MULTICAST_DELEGATE(FUIOnViewCreated);

/**
* Base class for all Coherent UI Components
*
* The class exposes all events generated by the Coherent UI View as well as its methods to
* the Blueprint Editor.
*/
UCLASS(BlueprintType)
class COHERENTUIPLUGIN_API UCoherentBaseComponent : public UActorComponent, public FCoherentUIViewListener
{
	GENERATED_UCLASS_BODY()
public:
	/** The URL to load when the View is created */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "View")
	FString URL;

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "View", meta = (ClampMin = "0", UIMin = "0", UIMax = "4096"))
	int32 Width;

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "View", meta = (ClampMin = "0", UIMin = "0", UIMax = "4096"))
	int32 Height;

	/** Indicates whether the View is transparent or composed on white */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "View")
	bool Transparent;

	/** Views with this property set can make UI click-through queries */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "View")
	bool SupportClickThrough;

	/** Indicates the maximal FPS that the View will try to achieve. It will never exceed the FPS of the game though. */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "View", meta = (ClampMin = "1", UIMin = "1", UIMax = "120"))
	int32 MaxFPS;

	/** Forces the View to render on the CPU only */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "View")
	bool ForceSoftwareRendering;

	/** Forces the View to use shared memory */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "View")
	bool UseSharedMemory;

	/** On-demand views will synchronize their frames with the game */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "View")
	bool IsOnDemand;

	/** Indicates whether input is forwarded to this view */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "View")
	bool bReceiveInput;

	/** When fired, the View is ready for binding events. Any event bound prior to this will be ignored */
	UPROPERTY(BlueprintAssignable)
	FUIReadyForBindingsSignature ReadyForBindings;
	
	/** The bindings have been released */
	UPROPERTY(BlueprintAssignable)
	FUIBindingsReleasedSignature BindingsReleased;
	
	/** Called when the requested page has been loaded completely */
	UPROPERTY(BlueprintAssignable)
	FUIFinishLoadSignature FinishLoad;
	
	/** Called when the requested page has failed its load for some reason */
	UPROPERTY(BlueprintAssignable)
	FUIFailLoad FailLoad;

	/** Called when the page moves to a new URL */
	UPROPERTY(BlueprintAssignable)
	FUIOnNavigate OnNavigate;

	/** Called when JavaScript emits a message */
	UPROPERTY(BlueprintAssignable)
	FUIScriptMessage ScriptMessage;

	/** Called when the page requests that the cursor be changed */
	UPROPERTY(BlueprintAssignable)
	FUICursorChanged CursorChanged;

	/** Called when JavaScript emits a message */
	UPROPERTY(BlueprintAssignable)
	FUIJavaScriptMesssage JavaScriptMessage;

	/** Called when an error happens in the View */
	UPROPERTY(BlueprintAssignable)
	FUIOnError ErrorOccured;

	/** Called an event for this View is triggered in JavaScript */
	UPROPERTY(BlueprintAssignable)
	FUIOnJavaScriptEvent JavaScriptEvent;

	/** Called when the View is ready to accept events */
	UPROPERTY(BlueprintAssignable)
	FUIScriptingReady UIScriptingReady;

	/** Called when the View object is created and ready for usage */
	UPROPERTY(BlueprintAssignable)
	FUIOnViewCreated UIOnViewCreated;

	/** Get the media request handler of the View */
	UFUNCTION(BlueprintCallable, Category = "View")
	UCoherentMediaRequestHandler* GetMediaRequestHandler();

	/** Resizes the View */
	UFUNCTION(BlueprintCallable, Category = "View")
	void Resize(int32 resizeWidth, int32 resizeHeight);

	/** Issues a query that will determine if the coordinates supplied are on an element in the View */
	UFUNCTION(BlueprintCallable, Category = "View")
	void IssueMouseOnUIQuery(float normX, float normY);

	/** Checks if the last issued query has finished */
	UFUNCTION(BlueprintCallable, Category = "View")
	bool HasMouseQueryFinished();

	/** [DEPRECATED] Waits for the query to finish and fetches its data */
	UFUNCTION(BlueprintCallable, Category = "View")
	void FetchMouseOnUIQuery();

	/** Returns the result of the last query. NB: you must have issued and fetched a query prior to this */
	UFUNCTION(BlueprintCallable, Category = "View")
	bool IsMouseOnView();

	/** Click-through queries check the alpha under the mouse. This value defines the threshold when a pixel is categorized on the UI or on the Game */
	UFUNCTION(BlueprintCallable, Category = "View")
	void SetClickThroughAlphaThreshold(float threshold);

	/** Gets the alpha threshold for click-through queries */
	UFUNCTION(BlueprintCallable, Category = "View")
	float GetClickThroughAlphaThreshold() const;

	/** Sets the maximum FPS that the View will try to achieve. It will never exceed the FPS of the game though.*/
	UFUNCTION(BlueprintCallable, Category = "View")
	void SetTargetFramerate(int32 target);
	
	/** Gets the current max FPS */
	UFUNCTION(BlueprintCallable, Category = "View")
	int32 GetTargetFramerate() const;

	/** Gets is the View is on-demand */
	UFUNCTION(BlueprintCallable, Category = "View")
	bool IsViewOnDemand() const;

	/** Gets is the View is transparent */
	UFUNCTION(BlueprintCallable, Category = "View")
	bool IsTransparent() const;

	/** Requests a View to completely re-draw itself */
	UFUNCTION(BlueprintCallable, Category = "View")
	void Redraw() const;

	/** Requests a new URL to be loaded in the View */
	UFUNCTION(BlueprintCallable, Category = "View")
	void Load(const FString& path);

	/** Requests the View to reload the current URL */
	UFUNCTION(BlueprintCallable, Category = "View")
	void Reload(bool ignoreCache);

	/** Gets the URL that the View is on */
	UFUNCTION(BlueprintCallable, Category = "View")
	FString GetCurentViewPath() const;
	
	/** Gets the URL that was last requested by the user for the View */
	UFUNCTION(BlueprintCallable, Category = "View")
	FString GetLastRequestedPath() const;
	
	/** Gets the URL that was last loaded successfully by the View */
	UFUNCTION(BlueprintCallable, Category = "View")
	FString GetLastLoadedPath() const;
	
	/** Gets the URL that last failed its loading */
	UFUNCTION(BlueprintCallable, Category = "View")
	FString GetLastFailedPath() const;

	/** Gives access to the UI texture */
	UFUNCTION(BlueprintCallable, Category = "View")
	UTexture2D* GetTexture() const;

	/** Creates an event that will be executed in JavaScript */
	UFUNCTION(BlueprintCallable, Category = "ViewScripting")
	UCoherentUIJSEvent* CreateJSEvent();

	/** Triggers an event in JavaScript */
	UFUNCTION(BlueprintCallable, Category = "ViewScripting")
	void TriggerJSEvent(const FString& name, UCoherentUIJSEvent* eventData) const;

	/** Indicates if functions can be bound to the View */
	UFUNCTION(BlueprintCallable, Category = "ViewScripting")
	bool  IsReadyForBindings() const;

	/** Indicates if scripts can be executed via View->TriggerEvent() */
	UFUNCTION(BlueprintCallable, Category = "ViewScripting")
	bool  IsReadyForScripting() const;

public:
	virtual void InitializeComponent();
	virtual void TickCustom(FCoherentComponentTickFunction* function);

	FCoherentComponentTickFunction PostPhysicsComponentTick;

	void RegisterTickFunctions(bool bRegister);

	virtual void OnRegister() override;
	virtual void OnUnregister() override;
	virtual void OnComponentDestroyed() override;

	virtual void BeginDestroy() override;
	virtual bool IsReadyForFinishDestroy() override;

public:
	virtual void OnViewCreated(Coherent::UI::View* View) override;
	void OnScriptingReady();
	virtual void OnReadyForBindings(int frameId,
		const wchar_t* path,
		bool isMainFrame) override;
	virtual void OnFinishLoad(int frameId,
		const wchar_t* validatedPath,
		bool isMainFrame,
		int statusCode,
		Coherent::UI::HTTPHeader* headers,
		unsigned headersCount) override;
	virtual void OnFailLoad(int frameId,
		const wchar_t* validatedPath,
		bool isMainFrame,
		const char* error) override;
	virtual void OnBindingsReleased(int frameId,
		const wchar_t* path,
		bool isMainFrame) override;
	virtual void OnNavigateTo(const wchar_t* path) override;
	virtual void OnScriptMessage(MessageLevel level, const wchar_t* message, const wchar_t* sourceId, int line) override;
	virtual void OnCursorChanged(Coherent::UI::CursorTypes cursor) override;
	virtual void OnJavaScriptMessage(const wchar_t* message, const wchar_t* defaultPrompt, const wchar_t* frameUrl, int messageType) override;
	virtual void OnError(const Coherent::UI::ViewError& error) override;
	virtual void OnCallback(const char* eventName, const Coherent::UI::EventArguments& arguments) override;
	virtual void OnRequestMediaStream(Coherent::UI::MediaStreamRequest* request) override;

	virtual void Release() override;

public:
	typedef TArray<TWeakObjectPtr<UCoherentBaseComponent>> WeakCoherentComponentsArray;
	static WeakCoherentComponentsArray::TIterator GetUCoherentBaseComponentIterator(UWorld* world);
	void ViewRequested();
private:
	bool bIsReadyForBindings;
	bool bIsReadyForScripting;
	bool bIsMouseOnUI;
	bool bIsReadyForFinishDestroy;

	UPROPERTY()
	UCoherentMediaRequestHandler* m_MediaRequestHandler;

};
